.data
		_stringConstant9:    .asciiz     "2WWI"			# Variable declaration for var %s
		_stringConstant8:    .asciiz     "a5ERlBWBqDtGeWujMwG"			# Variable declaration for var %s
		_stringConstant7:    .asciiz     "jb"			# Variable declaration for var %s
		_stringConstant6:    .asciiz     "BZ2DpwYi63cqrEU"			# Variable declaration for var %s
		_stringConstant5:    .asciiz     "vN6AnII"			# Variable declaration for var %s
		_stringConstant4:    .asciiz     "zgV"			# Variable declaration for var %s
		_stringConstant3:    .asciiz     "3iDIfawkV3c"			# Variable declaration for var %s
		_stringConstant2:    .asciiz     "KWd58fTNZwZJ"			# Variable declaration for var %s
		_stringConstant1:    .asciiz     "7aSaup5rDqdJqd8c"			# Variable declaration for var %s
		_stringConstant0:    .asciiz     "pDu67oFzsbbK4Izz9xb"			# Variable declaration for var %s
		v0:    .word     1			# Variable declaration for var %s
		v1:    .word     1			# Variable declaration for var %s
		v2:    .word     1			# Variable declaration for var %s
		v3:    .word     1			# Variable declaration for var %s
		v4:    .word     1			# Variable declaration for var %s
		v5:    .word     1			# Variable declaration for var %s
		v6:    .word     1			# Variable declaration for var %s
		v7:    .word     1			# Variable declaration for var %s
		v8:    .word     1			# Variable declaration for var %s
		v9:    .word     1			# Variable declaration for var %s
.text
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v0			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v1			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v2			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v3			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v4			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v5			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v6			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v7			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v8			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v9			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE2			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE2			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END3			# BINOP_EXP OR_OP - Done with or op
OR_TRUE2: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END3: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE4			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE4			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END5			# BINOP_EXP OR_OP - Done with or op
OR_TRUE4: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END5: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE6			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE6			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END7			# BINOP_EXP OR_OP - Done with or op
OR_TRUE6: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END7: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE8			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE8			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END9			# BINOP_EXP OR_OP - Done with or op
OR_TRUE8: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END9: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE10			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE10			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END11			# BINOP_EXP OR_OP - Done with or op
OR_TRUE10: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END11: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE12			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE12			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END13			# BINOP_EXP OR_OP - Done with or op
OR_TRUE12: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END13: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE14			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE14			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END15			# BINOP_EXP OR_OP - Done with or op
OR_TRUE14: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END15: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE16			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE16			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END17			# BINOP_EXP OR_OP - Done with or op
OR_TRUE16: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END17: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE18			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE18			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END19			# BINOP_EXP OR_OP - Done with or op
OR_TRUE18: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END19: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE0			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f38741			# Jump and link to callee function
		j JEND1			# Jump to end when done with true branch
JFALSE0: # Jump to here if 'if' is false
JEND1: # Jump to here if 'if' is false
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE22			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE22			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END23			# BINOP_EXP AND_OP - Done with or op
AND_FALSE22: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END23: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE24			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE24			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END25			# BINOP_EXP AND_OP - Done with or op
AND_FALSE24: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END25: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE26			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE26			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END27			# BINOP_EXP AND_OP - Done with or op
AND_FALSE26: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END27: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE28			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE28			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END29			# BINOP_EXP AND_OP - Done with or op
AND_FALSE28: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END29: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE30			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE30			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END31			# BINOP_EXP AND_OP - Done with or op
AND_FALSE30: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END31: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE32			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE32			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END33			# BINOP_EXP AND_OP - Done with or op
AND_FALSE32: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END33: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE34			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE34			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END35			# BINOP_EXP AND_OP - Done with or op
AND_FALSE34: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END35: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE36			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE36			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END37			# BINOP_EXP AND_OP - Done with or op
AND_FALSE36: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END37: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE38			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE38			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END39			# BINOP_EXP AND_OP - Done with or op
AND_FALSE38: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END39: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE20			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f52466			# Jump and link to callee function
		j JEND21			# Jump to end when done with true branch
JFALSE20: # Jump to here if 'if' is false
JEND21: # Jump to here if 'if' is false
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE42			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE42			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END43			# BINOP_EXP AND_OP - Done with or op
AND_FALSE42: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END43: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE44			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE44			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END45			# BINOP_EXP AND_OP - Done with or op
AND_FALSE44: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END45: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE46			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE46			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END47			# BINOP_EXP AND_OP - Done with or op
AND_FALSE46: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END47: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE48			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE48			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END49			# BINOP_EXP AND_OP - Done with or op
AND_FALSE48: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END49: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE50			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE50			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END51			# BINOP_EXP AND_OP - Done with or op
AND_FALSE50: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END51: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE52			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE52			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END53			# BINOP_EXP AND_OP - Done with or op
AND_FALSE52: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END53: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE54			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE54			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END55			# BINOP_EXP AND_OP - Done with or op
AND_FALSE54: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END55: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE56			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE56			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END57			# BINOP_EXP AND_OP - Done with or op
AND_FALSE56: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END57: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE58			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE58			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END59			# BINOP_EXP AND_OP - Done with or op
AND_FALSE58: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END59: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE40			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f13755			# Jump and link to callee function
		j JEND41			# Jump to end when done with true branch
JFALSE40: # Jump to here if 'if' is false
JEND41: # Jump to here if 'if' is false
		lw $v0, v3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE62			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE62			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END63			# BINOP_EXP AND_OP - Done with or op
AND_FALSE62: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END63: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE64			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE64			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END65			# BINOP_EXP AND_OP - Done with or op
AND_FALSE64: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END65: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE66			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE66			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END67			# BINOP_EXP AND_OP - Done with or op
AND_FALSE66: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END67: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE68			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE68			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END69			# BINOP_EXP AND_OP - Done with or op
AND_FALSE68: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END69: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE70			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE70			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END71			# BINOP_EXP AND_OP - Done with or op
AND_FALSE70: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END71: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE72			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE72			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END73			# BINOP_EXP AND_OP - Done with or op
AND_FALSE72: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END73: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE74			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE74			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END75			# BINOP_EXP AND_OP - Done with or op
AND_FALSE74: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END75: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE76			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE76			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END77			# BINOP_EXP AND_OP - Done with or op
AND_FALSE76: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END77: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE78			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE78			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END79			# BINOP_EXP AND_OP - Done with or op
AND_FALSE78: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END79: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE60			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f38741			# Jump and link to callee function
		j JEND61			# Jump to end when done with true branch
JFALSE60: # Jump to here if 'if' is false
JEND61: # Jump to here if 'if' is false
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE82			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE82			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END83			# BINOP_EXP AND_OP - Done with or op
AND_FALSE82: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END83: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE84			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE84			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END85			# BINOP_EXP AND_OP - Done with or op
AND_FALSE84: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END85: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE86			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE86			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END87			# BINOP_EXP AND_OP - Done with or op
AND_FALSE86: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END87: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE88			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE88			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END89			# BINOP_EXP AND_OP - Done with or op
AND_FALSE88: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END89: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE90			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE90			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END91			# BINOP_EXP AND_OP - Done with or op
AND_FALSE90: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END91: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE92			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE92			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END93			# BINOP_EXP AND_OP - Done with or op
AND_FALSE92: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END93: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE94			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE94			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END95			# BINOP_EXP AND_OP - Done with or op
AND_FALSE94: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END95: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE96			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE96			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END97			# BINOP_EXP AND_OP - Done with or op
AND_FALSE96: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END97: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE98			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE98			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END99			# BINOP_EXP AND_OP - Done with or op
AND_FALSE98: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END99: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE80			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f52466			# Jump and link to callee function
		j JEND81			# Jump to end when done with true branch
JFALSE80: # Jump to here if 'if' is false
JEND81: # Jump to here if 'if' is false
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE102			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE102			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END103			# BINOP_EXP AND_OP - Done with or op
AND_FALSE102: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END103: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE104			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE104			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END105			# BINOP_EXP AND_OP - Done with or op
AND_FALSE104: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END105: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE106			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE106			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END107			# BINOP_EXP AND_OP - Done with or op
AND_FALSE106: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END107: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE108			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE108			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END109			# BINOP_EXP AND_OP - Done with or op
AND_FALSE108: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END109: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE110			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE110			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END111			# BINOP_EXP AND_OP - Done with or op
AND_FALSE110: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END111: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE112			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE112			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END113			# BINOP_EXP AND_OP - Done with or op
AND_FALSE112: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END113: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE114			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE114			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END115			# BINOP_EXP AND_OP - Done with or op
AND_FALSE114: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END115: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE116			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE116			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END117			# BINOP_EXP AND_OP - Done with or op
AND_FALSE116: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END117: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE118			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE118			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END119			# BINOP_EXP AND_OP - Done with or op
AND_FALSE118: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END119: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE100			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f13755			# Jump and link to callee function
		j JEND101			# Jump to end when done with true branch
JFALSE100: # Jump to here if 'if' is false
JEND101: # Jump to here if 'if' is false
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE122			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE122			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END123			# BINOP_EXP OR_OP - Done with or op
OR_TRUE122: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END123: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE124			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE124			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END125			# BINOP_EXP OR_OP - Done with or op
OR_TRUE124: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END125: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE126			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE126			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END127			# BINOP_EXP OR_OP - Done with or op
OR_TRUE126: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END127: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE128			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE128			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END129			# BINOP_EXP OR_OP - Done with or op
OR_TRUE128: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END129: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE130			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE130			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END131			# BINOP_EXP OR_OP - Done with or op
OR_TRUE130: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END131: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE132			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE132			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END133			# BINOP_EXP OR_OP - Done with or op
OR_TRUE132: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END133: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE134			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE134			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END135			# BINOP_EXP OR_OP - Done with or op
OR_TRUE134: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END135: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE136			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE136			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END137			# BINOP_EXP OR_OP - Done with or op
OR_TRUE136: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END137: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE138			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE138			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END139			# BINOP_EXP OR_OP - Done with or op
OR_TRUE138: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END139: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE120			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f20302			# Jump and link to callee function
		j JEND121			# Jump to end when done with true branch
JFALSE120: # Jump to here if 'if' is false
JEND121: # Jump to here if 'if' is false
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE142			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE142			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END143			# BINOP_EXP AND_OP - Done with or op
AND_FALSE142: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END143: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE144			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE144			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END145			# BINOP_EXP AND_OP - Done with or op
AND_FALSE144: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END145: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE146			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE146			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END147			# BINOP_EXP AND_OP - Done with or op
AND_FALSE146: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END147: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE148			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE148			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END149			# BINOP_EXP AND_OP - Done with or op
AND_FALSE148: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END149: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE150			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE150			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END151			# BINOP_EXP AND_OP - Done with or op
AND_FALSE150: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END151: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE152			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE152			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END153			# BINOP_EXP AND_OP - Done with or op
AND_FALSE152: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END153: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE154			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE154			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END155			# BINOP_EXP AND_OP - Done with or op
AND_FALSE154: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END155: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE156			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE156			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END157			# BINOP_EXP AND_OP - Done with or op
AND_FALSE156: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END157: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE158			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE158			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END159			# BINOP_EXP AND_OP - Done with or op
AND_FALSE158: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END159: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE140			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f52466			# Jump and link to callee function
		j JEND141			# Jump to end when done with true branch
JFALSE140: # Jump to here if 'if' is false
JEND141: # Jump to here if 'if' is false
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE162			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE162			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END163			# BINOP_EXP AND_OP - Done with or op
AND_FALSE162: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END163: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE164			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE164			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END165			# BINOP_EXP AND_OP - Done with or op
AND_FALSE164: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END165: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE166			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE166			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END167			# BINOP_EXP AND_OP - Done with or op
AND_FALSE166: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END167: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE168			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE168			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END169			# BINOP_EXP AND_OP - Done with or op
AND_FALSE168: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END169: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE170			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE170			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END171			# BINOP_EXP AND_OP - Done with or op
AND_FALSE170: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END171: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE172			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE172			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END173			# BINOP_EXP AND_OP - Done with or op
AND_FALSE172: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END173: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE174			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE174			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END175			# BINOP_EXP AND_OP - Done with or op
AND_FALSE174: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END175: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE176			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE176			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END177			# BINOP_EXP AND_OP - Done with or op
AND_FALSE176: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END177: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, AND_FALSE178			# BINOP_EXP AND_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		beq $v1, $zero, AND_FALSE178			# BINOP_EXP AND_OP - Check if $v1 is zero
		li $v0, 1			# BINOP_EXP AND_OP - And is true, both 1's
		j AND_END179			# BINOP_EXP AND_OP - Done with or op
AND_FALSE178: # BINOP_EXP AND_OP - Jump here if OR op is true
		li $v0, 0			# BINOP_EXP AND_OP - And is false, neither is a 1
AND_END179: # BINOP_EXP AND_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE160			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f38741			# Jump and link to callee function
		j JEND161			# Jump to end when done with true branch
JFALSE160: # Jump to here if 'if' is false
JEND161: # Jump to here if 'if' is false
		lw $v0, v1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE182			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE182			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END183			# BINOP_EXP OR_OP - Done with or op
OR_TRUE182: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END183: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE184			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE184			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END185			# BINOP_EXP OR_OP - Done with or op
OR_TRUE184: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END185: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE186			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE186			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END187			# BINOP_EXP OR_OP - Done with or op
OR_TRUE186: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END187: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE188			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE188			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END189			# BINOP_EXP OR_OP - Done with or op
OR_TRUE188: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END189: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE190			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE190			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END191			# BINOP_EXP OR_OP - Done with or op
OR_TRUE190: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END191: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE192			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE192			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END193			# BINOP_EXP OR_OP - Done with or op
OR_TRUE192: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END193: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE194			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE194			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END195			# BINOP_EXP OR_OP - Done with or op
OR_TRUE194: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END195: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE196			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE196			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END197			# BINOP_EXP OR_OP - Done with or op
OR_TRUE196: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END197: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE198			# BINOP_EXP OR_OP - Check if $v1 is zero
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		bne $v1, $zero, OR_TRUE198			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END199			# BINOP_EXP OR_OP - Done with or op
OR_TRUE198: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END199: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE180			# IF_STMT - Jump to to JFALSE if 'if' is false
		move $v0, $fp			# Func Call - Make frame, load $fp to push curr frame pointer
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		move $fp, $sp			# Func Call - Make frame, move frame pointer to stack pointer
		add $fp, $fp, 0			# Func Call - Make frame, Adjust frame ptr to end of args
		jal f38741			# Jump and link to callee function
		j JEND181			# Jump to end when done with true branch
JFALSE180: # Jump to here if 'if' is false
JEND181: # Jump to here if 'if' is false
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# EXIT pass return code
		li $v0, 17			# EXIT specify exit2 as the syscall to perform
		syscall			# EXIT perform syscall
f24714: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 57			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 67			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 246			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 182			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 215			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 56			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 48			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 25			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 68			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 151			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 104			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 28			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 219			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 242			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 192			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 52			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 208			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 46			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 26			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 173			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 244			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 74			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v0			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f13755: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 110			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 140			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 182			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 239			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 158			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 44			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 37			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 250			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 23			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 248			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 210			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 105			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 173			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 150			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 118			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 209			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 178			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 223			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 161			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 185			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 240			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 165			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 249			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v9			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f38741: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 217			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 36			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 79			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 252			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 102			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 220			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 183			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 131			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 36			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 216			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 30			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 162			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 200			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 92			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 90			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 181			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 160			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 44			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 208			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 126			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 92			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 85			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 181			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 234			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v7			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f9948: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v5			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f12633: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 165			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 167			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 254			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 190			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 43			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 242			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 54			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 116			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 167			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 126			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 155			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 157			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 7			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 186			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 48			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 87			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 199			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 111			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 53			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 119			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v6			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f20302: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v8			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f52466: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v6			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f56859: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 166			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 64			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 119			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 117			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 135			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 186			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 120			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 252			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 180			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 60			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 246			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 241			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 153			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 59			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 237			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 213			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 164			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 202			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 245			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 92			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 8			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 71			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 184			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 96			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 20			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 79			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v9			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f65479: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 235			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 118			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 156			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 90			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 151			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 117			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 40			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 109			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 116			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 14			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 101			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 97			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v2			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
f57440: # Func Name
		move $v0, $zero			# Function Callee - make frame, make room for args, Initialize by setting $v0 zero before pushing
		move $v0, $ra			# Function Callee - make frame, push ret address to stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		la $v0, _stringConstant9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTSTRING pass address of string to be printed
		li $v0, 4			# PRINTSTRING specify printstring as the syscall to perform
		syscall			# PRINTSTRING perform syscall
		li $v0, 215			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 172			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 151			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 46			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 230			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 2			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 46			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 30			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 12			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 87			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 78			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 242			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 180			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 25			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 23			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 144			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 204			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 178			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 120			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 247			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 84			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 237			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, v9			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, v9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $ra, $v0			# Function - Return, pop return address to $ra
		move $sp, $fp			# Function - Return, set stack pointer to frame ptr
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $fp, $v0			# Function - Return, Set $fp to prev frame ptr 4 after curr fp
		sw $v1, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		jr $ra			# Function - Return, final jump
