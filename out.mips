.data
		t0:    .word     0			# Variable declaration for var %s
		f0:    .word     0			# Variable declaration for var %s
		t1:    .word     0			# Variable declaration for var %s
		f1:    .word     0			# Variable declaration for var %s
		t2:    .word     0			# Variable declaration for var %s
		f2:    .word     0			# Variable declaration for var %s
		t3:    .word     0			# Variable declaration for var %s
		f3:    .word     0			# Variable declaration for var %s
		t4:    .word     0			# Variable declaration for var %s
		f4:    .word     0			# Variable declaration for var %s
		t5:    .word     0			# Variable declaration for var %s
		f5:    .word     0			# Variable declaration for var %s
		t6:    .word     0			# Variable declaration for var %s
		f6:    .word     0			# Variable declaration for var %s
		t7:    .word     0			# Variable declaration for var %s
		f7:    .word     0			# Variable declaration for var %s
		t8:    .word     0			# Variable declaration for var %s
		f8:    .word     0			# Variable declaration for var %s
		t9:    .word     0			# Variable declaration for var %s
		f9:    .word     0			# Variable declaration for var %s
.text
		li $v0, 78			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 107			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 44			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 24			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 30			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 192			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 2000000			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE0			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END1			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE0: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END1: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 78			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 107			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bgt $v0, $v1, GT_OP_TRUE2			# BINOP_EXP GT_OP - Branch if GT
		li $v0, 0			# BINOP_EXP GT_OP - Store 0 for false comparison
		j GT_OP_END3			# BINOP_EXP GT_OP - Done with GT expression if it is true, go to end
GT_OP_TRUE2: # BINOP_EXP GT_OP - Branch to here if GT
		li $v0, 1			# BINOP_EXP GT_OP - Store 1 for true comparison
GT_OP_END3: # BINOP_EXP GT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 44			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 24			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 30			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 192			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f0			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 162			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE4			# BINOP_EXP OR_OP - Check if $v1 is zero
		bne $v1, $zero, OR_TRUE4			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END5			# BINOP_EXP OR_OP - Done with or op
OR_TRUE4: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END5: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t0			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 38			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE6			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END7			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE6: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END7: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 82			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $v1, EQ_OP_BNE8			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j NE_OP_END9			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BNE8: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
NE_OP_END9: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 158			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 170			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 115			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 241			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 231			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 248			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 9			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 181			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f1			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 23			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 91			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 220			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 133			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 200			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 138			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 45			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 20			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 23			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE10			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END11			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE10: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END11: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 91			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 220			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 133			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 200			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 138			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 45			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 20			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t1			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 83			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE12			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END13			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE12: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END13: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 245			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 193			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 85			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 197			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 43			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 80			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 128			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 151			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 102			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 174			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 251			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 62			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 72			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 4			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 247			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 83			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 245			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE14			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END15			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE14: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END15: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 193			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 85			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 197			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 43			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 80			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 128			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 151			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 102			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 174			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 251			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 62			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 72			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 4			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 247			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f2			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 176			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 2000000			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 176			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bgt $v0, $v1, GT_OP_TRUE16			# BINOP_EXP GT_OP - Branch if GT
		li $v0, 0			# BINOP_EXP GT_OP - Store 0 for false comparison
		j GT_OP_END17			# BINOP_EXP GT_OP - Done with GT expression if it is true, go to end
GT_OP_TRUE16: # BINOP_EXP GT_OP - Branch to here if GT
		li $v0, 1			# BINOP_EXP GT_OP - Store 1 for true comparison
GT_OP_END17: # BINOP_EXP GT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t2			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 16			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE18			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END19			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE18: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END19: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 176			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 181			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 112			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 158			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 39			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 229			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 11			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 232			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 171			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 219			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE20			# BINOP_EXP OR_OP - Check if $v1 is zero
		bne $v1, $zero, OR_TRUE20			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END21			# BINOP_EXP OR_OP - Done with or op
OR_TRUE20: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END21: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f3			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 218			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 86			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 245			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 11			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 215			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 222			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 211			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 64			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 75			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 156			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 206			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 80			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 64			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 41			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 23			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 218			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 86			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 245			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE22			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END23			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE22: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END23: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 11			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 215			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 222			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 211			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 64			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 75			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 156			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 206			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 80			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 64			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 41			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 23			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t3			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 130			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE24			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END25			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE24: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END25: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 89			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 237			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 234			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 33			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 232			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 130			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 236			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 215			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 145			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 237			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 11			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 115			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 62			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 250			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 81			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 100			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $v1, EQ_OP_BNE26			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j NE_OP_END27			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BNE26: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
NE_OP_END27: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f4			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 227			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 46			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 205			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 148			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 37			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 77			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 52			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 163			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 239			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE28			# BINOP_EXP OR_OP - Check if $v1 is zero
		bne $v1, $zero, OR_TRUE28			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END29			# BINOP_EXP OR_OP - Done with or op
OR_TRUE28: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END29: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t4			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 201			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE30			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END31			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE30: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END31: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 201			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE32			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END33			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE32: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END33: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f5			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 119			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 47			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 181			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 113			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 186			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 29			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 87			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $v1, EQ_OP_BNE34			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j NE_OP_END35			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BNE34: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
NE_OP_END35: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 222			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 231			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 160			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 174			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 97			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 177			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 205			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 51			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 243			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 139			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 255			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 147			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t5			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 113			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 38			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 118			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 195			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 251			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 8			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 2000000			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE36			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END37			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE36: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END37: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 113			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bgt $v0, $v1, GT_OP_TRUE38			# BINOP_EXP GT_OP - Branch if GT
		li $v0, 0			# BINOP_EXP GT_OP - Store 0 for false comparison
		j GT_OP_END39			# BINOP_EXP GT_OP - Done with GT expression if it is true, go to end
GT_OP_TRUE38: # BINOP_EXP GT_OP - Branch to here if GT
		li $v0, 1			# BINOP_EXP GT_OP - Store 1 for true comparison
GT_OP_END39: # BINOP_EXP GT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 38			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 118			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 195			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 251			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 8			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f6			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 186			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 83			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 26			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 243			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 235			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 120			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 31			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 223			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 163			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 206			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 74			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 149			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 150			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 211			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 106			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 28			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $v1, EQ_OP_BNE40			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j NE_OP_END41			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BNE40: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
NE_OP_END41: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 207			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 12			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 86			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 221			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 88			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 138			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 111			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 174			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 199			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t6			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 49			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE42			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END43			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE42: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END43: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 244			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 108			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 157			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 208			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 246			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 182			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 144			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 150			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 241			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 127			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 50			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 49			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 244			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 108			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 157			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 208			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 246			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 182			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 144			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 150			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 241			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 127			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 50			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 2000000			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		blt $v0, $v1, LT_OP_TRUE44			# BINOP_EXP LT_OP - Branch if LT
		li $v0, 0			# BINOP_EXP LT_OP - Store 0 for false comparison
		j LT_OP_END45			# BINOP_EXP LT_OP - Done with LT expression if it is true, go to end
LT_OP_TRUE44: # BINOP_EXP LT_OP - Branch to here if LT
		li $v0, 1			# BINOP_EXP LT_OP - Store 1 for true comparison
LT_OP_END45: # BINOP_EXP LT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f7			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 38			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 38			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE46			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END47			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE46: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END47: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t7			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 187			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE48			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END49			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE48: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END49: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bne $v0, $zero, OR_TRUE50			# BINOP_EXP OR_OP - Check if $v1 is zero
		bne $v1, $zero, OR_TRUE50			# BINOP_EXP OR_OP - Check if $v1 is zero
		li $v0, 0			# BINOP_EXP OR_OP - Or is false, both 0's
		j OR_END51			# BINOP_EXP OR_OP - Done with or op
OR_TRUE50: # BINOP_EXP OR_OP - Jump here if OR op is true
		li $v0, 1			# BINOP_EXP OR_OP - Or is true, neither is a 0
OR_END51: # BINOP_EXP OR_OP - Jump here if OR op is true
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f8			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 126			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 143			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 173			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 2			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 173			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 93			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 126			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE52			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END53			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE52: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END53: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 143			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 173			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 2			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 173			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 93			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t8			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, NOTEXP_TRUE54			# UNOP_EXP NOT_OP - Branch if NOT exp is true (i.e !0 = 1)
		li $v0, 0			# UNOP_EXP NOT_OP - Store 0 for false comparison
		j NOT_OP_END55			# UNOP_EXP NOT_OP - Done with GE expression if it is true, go to end
NOTEXP_TRUE54: # UNOP_EXP NOT_OP - Branch to here if GE
		li $v0, 1			# UNOP_EXP NOT_OP - Store 1 for true comparison
NOT_OP_END55: # UNOP_EXP NOT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE56			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END57			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE56: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END57: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, f9			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 5			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 112			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 58			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 168			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 69			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 190			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 34			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 254			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 45			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 244			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 170			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 231			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 18			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 5			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 112			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 58			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 168			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 69			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $v1, EQ_OP_BE58			# BINOP_EXP EQ_OP - Branch if equal
		li $v0, 0			# BINOP_EXP EQ_OP - Store 0 for false comparison
		j EQ_OP_END59			# BINOP_EXP EQ_OP - Done with equal expression if it is false. Go to end
EQ_OP_BE58: # BINOP_EXP EQ_OP - Branch to here if not equal
		li $v0, 1			# BINOP_EXP EQ_OP - Store one for true comparison
EQ_OP_END59: # BINOP_EXP EQ_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 190			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 34			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 254			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 45			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 244			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 170			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 231			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 18			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, t9			# ASSIGN_STMT - store $v0 on top of stack
		lw $v0, f0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE60			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 190			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 206			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 89			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 60			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 98			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 156			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 105			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE60: # Jump to here if 'if' is false
		lw $v0, t0			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE61			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 202			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 111			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 208			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 96			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 168			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 223			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 249			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 37			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 158			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 195			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 222			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 192			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 175			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 91			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 16			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 38			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 150			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 66			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 22			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 218			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 115			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 114			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 117			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 115			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 43			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 98			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 185			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE61: # Jump to here if 'if' is false
		lw $v0, f1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE62			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 119			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 9			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 65			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 92			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 239			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 33			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 201			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 3			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 193			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 9			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 148			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 243			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 81			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 113			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 98			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 104			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 31			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 112			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 239			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 199			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 106			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 135			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 125			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 30			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 200			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE62: # Jump to here if 'if' is false
		lw $v0, t1			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE63			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 89			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 135			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 235			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 3			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 113			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 219			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE63: # Jump to here if 'if' is false
		lw $v0, f2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE64			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 197			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 53			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 73			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 180			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 107			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 76			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 189			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 140			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 42			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 11			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 238			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 175			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 159			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 247			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 63			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 40			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 52			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 205			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 223			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE64: # Jump to here if 'if' is false
		lw $v0, t2			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE65			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 22			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 176			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 198			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 44			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 3			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 154			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 24			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 42			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 83			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 93			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 18			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 185			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 98			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 162			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 232			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 43			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 184			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 117			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 196			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 180			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 193			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 48			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 102			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 26			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE65: # Jump to here if 'if' is false
		lw $v0, f3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE66			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 163			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 110			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 46			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 168			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 35			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 121			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 96			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 193			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 83			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 31			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 254			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 183			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 163			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 230			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 89			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 16			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 65			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 140			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 63			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 197			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 170			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 40			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE66: # Jump to here if 'if' is false
		lw $v0, t3			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE67			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 140			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 202			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 180			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 182			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 28			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 35			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 7			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 62			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 155			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 191			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE67: # Jump to here if 'if' is false
		lw $v0, f4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE68			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 111			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 117			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 167			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 45			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 144			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 170			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 77			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 235			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 158			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 157			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 16			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 173			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 153			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE68: # Jump to here if 'if' is false
		lw $v0, t4			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE69			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 66			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE69: # Jump to here if 'if' is false
		lw $v0, f5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE70			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 248			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 48			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 211			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 183			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 110			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 7			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 168			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 95			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 54			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 216			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 39			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 203			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 16			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 209			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 101			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 120			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 108			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 86			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 92			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 171			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 130			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 4			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE70: # Jump to here if 'if' is false
		lw $v0, t5			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE71			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 241			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 241			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 54			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 119			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 115			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 219			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 80			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 222			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 105			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 129			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 41			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 144			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 233			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 46			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 130			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 26			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 130			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 17			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 64			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 194			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 161			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 157			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 115			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 250			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 218			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 254			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 185			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE71: # Jump to here if 'if' is false
		lw $v0, f6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE72			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 94			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 101			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 193			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 206			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 231			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 213			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 210			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 186			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 121			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 152			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 151			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 192			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 217			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 155			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 194			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 111			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 194			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 155			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE72: # Jump to here if 'if' is false
		lw $v0, t6			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE73			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 13			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 40			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 197			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 109			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 228			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 63			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 24			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 247			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 174			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 225			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 190			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 110			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 24			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 243			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 96			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 57			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 182			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 31			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 162			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 90			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 11			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 199			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 160			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 54			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 147			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE73: # Jump to here if 'if' is false
		lw $v0, f7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE74			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 94			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 225			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 243			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 71			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 121			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 53			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 71			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 206			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 104			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 25			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 71			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 23			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 60			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 201			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE74: # Jump to here if 'if' is false
		lw $v0, t7			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE75			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 139			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 161			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 55			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 79			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 106			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 24			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 180			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 230			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 112			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 197			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 244			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 109			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 254			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 236			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 73			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 161			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 60			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 61			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 237			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 35			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 164			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 246			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE75: # Jump to here if 'if' is false
		lw $v0, f8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE76			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 31			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 49			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 231			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 123			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 71			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 14			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 94			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 212			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 50			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 117			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 139			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 137			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 188			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 134			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 220			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE76: # Jump to here if 'if' is false
		lw $v0, t8			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE77			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 35			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 253			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 102			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 92			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 85			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 69			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 230			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 171			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 169			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 223			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 146			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 178			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 239			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 142			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 53			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 162			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 121			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 78			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 137			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 245			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 78			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 238			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 70			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 222			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 85			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 71			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 232			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE77: # Jump to here if 'if' is false
		lw $v0, f9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE78			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 167			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 241			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 45			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 63			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 32			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 230			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 243			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 31			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 59			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 156			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 41			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 44			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 245			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 250			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 162			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 80			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 181			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 243			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 8			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 255			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 48			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 209			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 87			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 191			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 148			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE78: # Jump to here if 'if' is false
		lw $v0, t9			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		beq $v0, $zero, JFALSE79			# IF_STMT - Jump to to JFALSE if 'if' is false
		li $v0, 254			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 19			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 7			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 214			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 154			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 201			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 48			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 218			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 35			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 3			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 9			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 149			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 62			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 16			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 226			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 141			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 68			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 66			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 108			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 83			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 224			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 61			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 139			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		mul $v0, $v0, $v1			# BINOP_EXP TIMES_OP - Multiply the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 60			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 22			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 191			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		add $v0, $v0, $v1			# BINOP_EXP PLUS_OP - Add the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		and $v0, $v0, $v1			# BINOP_EXP BAN_OP - And the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		or $v0, $v0, $v1			# BINOP_EXP BOR_OP - Or the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
JFALSE79: # Jump to here if 'if' is false
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# EXIT pass return code
		li $v0, 17			# EXIT specify exit2 as the syscall to perform
		syscall			# EXIT perform syscall
