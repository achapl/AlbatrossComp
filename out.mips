.data
		n:    .word     0			# Variable declaration for var %s
		i:    .word     0			# Variable declaration for var %s
.text
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, n			# ASSIGN_STMT - store $v0 on top of stack
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, i			# ASSIGN_STMT - store $v0 on top of stack
WHILE_START0: # WHILE - Start of while loop
		lw $v0, n			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bgt $v0, $v1, GT_OP_TRUE0			# BINOP_EXP GT_OP - Branch if GT
		li $v0, 0			# BINOP_EXP GT_OP - Store 0 for false comparison
		j GT_OP_END1			# BINOP_EXP GT_OP - Done with GT expression if it is true, go to end
GT_OP_TRUE0: # BINOP_EXP GT_OP - Branch to here if GT
		li $v0, 1			# BINOP_EXP GT_OP - Store 1 for true comparison
GT_OP_END1: # BINOP_EXP GT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		li $v1, 0			# WHILE_STMT - Get 1 (true) to compare to
		beq $v0, $v1, WHILE_END1			# WHILE_STMT - Test condition
		li $v0, 10			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, i			# ASSIGN_STMT - store $v0 on top of stack
WHILE_START2: # WHILE - Start of while loop
		lw $v0, i			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		lw $v0, n			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		bgt $v0, $v1, GT_OP_TRUE2			# BINOP_EXP GT_OP - Branch if GT
		li $v0, 0			# BINOP_EXP GT_OP - Store 0 for false comparison
		j GT_OP_END3			# BINOP_EXP GT_OP - Done with GT expression if it is true, go to end
GT_OP_TRUE2: # BINOP_EXP GT_OP - Branch to here if GT
		li $v0, 1			# BINOP_EXP GT_OP - Store 1 for true comparison
GT_OP_END3: # BINOP_EXP GT_OP - End from all branches here
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		li $v1, 0			# WHILE_STMT - Get 1 (true) to compare to
		beq $v0, $v1, WHILE_END3			# WHILE_STMT - Test condition
		lw $v0, i			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
		lw $v0, n			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# PRINTINT pass int to be printed
		li $v0, 1			# PRINTINT specify printint as the syscall to perform
		syscall			# PRINTINT perform syscall
		lw $v0, i			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, i			# ASSIGN_STMT - store $v0 on top of stack
		j WHILE_START2			# WHILE_STMT - Loop back to top of while loop
WHILE_END3: #  WHILE_STMT - End of loop
		lw $v0, n			# VAR_EXP - Load variable value
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		li $v0, 1			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP1 - adjust stack pointer by register size to pt to top stack value
		lw $v1, ($sp)			# POP1 - store $v0 on top of stack
		sw $zero, ($sp)			# POP1 - clear free space atop stack
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sub $v0, $v0, $v1			# BINOP_EXP MINUS_OP - Subtract the two operands
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		sw $v0, n			# ASSIGN_STMT - store $v0 on top of stack
		j WHILE_START0			# WHILE_STMT - Loop back to top of while loop
WHILE_END1: #  WHILE_STMT - End of loop
		li $v0, 0			# astExpr - int_exp: load resulting integer value to push to the stack
		sw $v0, ($sp) 			# PUSH0 - store $v0 on top of stack
		addi $at, $zero, 4			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		sub $sp, $sp, $at			# PUSH0 - adjust stack pointer by register size to pt to next unused position
		addi $sp, $sp, 4			# POP0 - adjust stack pointer by register size to pt to top stack value
		lw $v0, ($sp)			# POP0 - store $v0 on top of stack
		sw $zero, ($sp)			# POP0 - clear free space atop stack
		move $a0, $v0			# EXIT pass return code
		li $v0, 17			# EXIT specify exit2 as the syscall to perform
		syscall			# EXIT perform syscall
